---
import Base from '../../layouts/Base.astro';
import { t, DEFAULT_LANG, type Lang } from '../../i18n';

const lang = (Astro.params.lang as Lang | undefined) ?? DEFAULT_LANG;
const statusMessageTranslations = {
  success: t(lang, 'contact_success'),
  error: t(lang, 'contact_error'),
  network: t(lang, 'contact_network_error'),
};
const privacySlug = lang === 'en' ? 'privacy' : 'privacidad';
const privacyPrefix = t(lang, 'contact_privacy_prefix');
const privacyLinkText = t(lang, 'contact_privacy_link');
const privacySuffix = t(lang, 'contact_privacy_suffix');
const needsSpaceBeforeLink = /\S$/.test(privacyPrefix) && !/[’']$/.test(privacyPrefix);
const needsSpaceBeforeSuffix = privacySuffix !== '' && !/^[\s,.;:!?]/.test(privacySuffix);
---
<Base title={`Auris — ${t(lang, 'nav_contact')}`} lang={lang}>
  <section class="mx-auto max-w-container px-4 py-10 md:py-16">
    <h1 class="text-2xl md:text-3xl font-extrabold">{t(lang, 'contact_title')}</h1>

    <form
      id="contactForm"
      class="mt-6 max-w-xl space-y-4"
      novalidate
      data-lang={lang}
      data-status-success={statusMessageTranslations.success}
      data-status-error={statusMessageTranslations.error}
      data-status-network={statusMessageTranslations.network}
    >
      <div>
        <label class="block text-sm mb-1">{t(lang, 'contact_name_label')}</label>
        <input name="name" required class="w-full rounded-md bg-white/5 border border-white/10 px-3 py-2" />
      </div>
      <div>
        <label class="block text-sm mb-1">{t(lang, 'contact_email_label')}</label>
        <input type="email" name="email" required class="w-full rounded-md bg-white/5 border border-white/10 px-3 py-2" />
      </div>
      <div>
        <label class="block text-sm mb-1">{t(lang, 'contact_message_label')}</label>
        <textarea name="message" rows="5" required class="w-full rounded-md bg-white/5 border border-white/10 px-3 py-2"></textarea>
      </div>

      <!-- RGPD: consentimiento -->
      <div class="flex items-start gap-3">
        <input id="consent" type="checkbox" required class="mt-1 rounded bg-white/5 border-white/10" />
        <label for="consent" class="text-sm text-white/80">
          {privacyPrefix}
          {needsSpaceBeforeLink ? ' ' : ''}
          <a href={`/${lang}/${privacySlug}`} class="underline">
            {privacyLinkText}
          </a>
          {needsSpaceBeforeSuffix ? ' ' : ''}
          {privacySuffix}
        </label>
      </div>

      <!-- Honeypot anti-spam -->
      <input type="text" name="website" style="display:none" autocomplete="off" />

      <button class="w-full sm:w-auto rounded-md bg-brand-accent text-black font-semibold px-5 py-3 hover:opacity-90">
        {t(lang,'cta_primary')}
      </button>

      <p id="msg" role="status" class="text-sm text-white/70 mt-2"></p>
    </form>
  </section>

  <script is:inline>
    const form = document.getElementById('contactForm');
    const statusEl = document.getElementById('msg');

    if (!(form instanceof HTMLFormElement) || !(statusEl instanceof HTMLElement)) {
      console.warn('Contact form markup missing, aborting behaviour.');
    } else {
      const currentLang = form.dataset.lang ?? 'es';
      const statusMessages = {
        success: form.dataset.statusSuccess ?? '',
        error: form.dataset.statusError ?? '',
        network: form.dataset.statusNetwork ?? '',
      };
      const submitButton = form.querySelector('button[type="submit"]');

      form.addEventListener('submit', async (event) => {
        event.preventDefault();

        const formData = new FormData(form);
        const entries = Object.fromEntries(formData.entries());
        const serialised = Object.fromEntries(
          Object.entries(entries).map(([key, value]) => [key, typeof value === 'string' ? value : ''])
        );
        const body = { ...serialised, lang: currentLang };

        if (submitButton instanceof HTMLButtonElement) {
          submitButton.disabled = true;
          submitButton.dataset.loading = 'true';
        }

        statusEl.textContent = '';

        try {
          const response = await fetch('/api/contact', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(body),
          });

          const result = await response.json();

          if (response.ok && result.ok) {
            statusEl.textContent = statusMessages.success;
            form.reset();
          } else {
            statusEl.textContent = result.error || statusMessages.error;
          }
        } catch (err) {
          console.error('Error enviando formulario de contacto', err);
          statusEl.textContent = statusMessages.network;
        } finally {
          if (submitButton instanceof HTMLButtonElement) {
            submitButton.disabled = false;
            delete submitButton.dataset.loading;
          }
        }
      });
    }
  </script>
</Base>
