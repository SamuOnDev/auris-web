---
import { LANGUAGE_OPTIONS, DEFAULT_LANG, type Lang } from '../i18n';

interface Props {
  currentLang?: Lang;
}

const { currentLang } = Astro.props as Props;
const current = currentLang ?? (Astro.params.lang as Lang | undefined) ?? DEFAULT_LANG;
const options = LANGUAGE_OPTIONS;
const selectId = `lang-switcher-${Math.random().toString(36).slice(2)}`;
---
<label class="sr-only" for={selectId}>Idioma</label>
<select
  id={selectId}
  data-lang-switcher
  class="rounded-md bg-white/5 border border-white/10 px-2 py-2 text-sm"
  value={current}
>
  {options.map(({ code, label }) => (
    <option value={code}>{label}</option>
  ))}
</select>
<script is:inline>
  const select = document.querySelector('[data-lang-switcher]');
  const COOKIE_NAME = 'lang';
  const ONE_YEAR_SECONDS = 60 * 60 * 24 * 365;
  const setLangCookie = (value) => {
    document.cookie = `${COOKIE_NAME}=${value}; Max-Age=${ONE_YEAR_SECONDS}; Path=/; SameSite=Lax`;
  };
  if (select instanceof HTMLSelectElement) {
    const supportedLangs = Array.from(select.options).map((option) => option.value);
    const isSupportedLang = (value) => supportedLangs.includes(value);
    setLangCookie(select.value);

    select.addEventListener('change', () => {
      const selected = select.value;
      setLangCookie(selected);

      const { location } = window;
      const { pathname, search, hash } = location;
      const segments = pathname.split('/').filter(Boolean);
      const hasTrailingSlash = pathname.endsWith('/');

      let nextSegments;
      if (segments.length === 0) {
        nextSegments = [selected];
      } else if (isSupportedLang(segments[0])) {
        nextSegments = [selected, ...segments.slice(1)];
      } else {
        nextSegments = [selected, ...segments];
      }

      const suffix = hasTrailingSlash ? '/' : '';
      const nextPath = `/${nextSegments.join('/')}${suffix}`;

      location.assign(`${nextPath}${search}${hash}`);
    });
  }
</script>